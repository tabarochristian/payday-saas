version: '3.8'

services:
  web:
    build: .
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate && python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 payday.wsgi:application"
    volumes:
      - .:/app
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      - minio-init
      - redis
      - slave
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    restart: unless-stopped
    command: celery -A payday worker -l INFO -E
    volumes:
      - .:/app
    depends_on:
      - web
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "celery -A payday inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  beat:
    build: .
    restart: unless-stopped
    command: celery -A payday beat -l INFO
    volumes:
      - .:/app
    depends_on:
      - worker
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "celery -A payday inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  master:
    image: bitnami/postgresql
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - master_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=slave
      - POSTGRESQL_REPLICATION_PASSWORD=payday
      - POSTGRESQL_USERNAME=master
      - POSTGRESQL_PASSWORD=payday
      - POSTGRESQL_DATABASE=payday
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U master -d payday"]
      interval: 30s
      timeout: 10s
      retries: 3

  slave:
    image: bitnami/postgresql
    restart: always
    ports:
      - '5433:5432'
    depends_on:
      - master
    environment:
      - POSTGRESQL_PASSWORD=payday
      - POSTGRESQL_MASTER_HOST=master
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=slave
      - POSTGRESQL_REPLICATION_PASSWORD=payday
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slave -h master -d payday"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  metabase:
    image: metabase/metabase:latest
    ports:
      - "3000:3000"
    volumes:
      - metabase_data:/data

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_OPTS=--address :9000 --console-address :9001
    command: server /data --address :9000 --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./bucket.sh:/docker-entrypoint-init.d/bucket.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio-init:
    build:
      context: .
      dockerfile: Miniofile
    depends_on:
      - minio
    environment:
      - MINIO_BUCKET_NAME=payday
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  
volumes:
  metabase_data:
  master_data:
  minio_data:
