version: '3.8'

services:
  # Thumbor service
  thumbor:
    image: minimalcompact/thumbor:6.7.5
    container_name: payday-thumbor
    ports:
      - "8888:80"
    environment:
      THUMBOR_LOG_LEVEL: DEBUG
      THUMBOR_SECURITY_KEY: MY_SECURE_KEY
      THUMBOR_DETECTORS: '["thumbor.detectors.face_detector", "thumbor.detectors.feature_detector"]'
      THUMBOR_FACE_DETECTOR_CASCADE_FILE: /usr/local/lib/python3.9/site-packages/cv2/data/haarcascade_frontalface_default.xml
    volumes:
      - ./thumbor/storage:/app/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Landlord service (Flask)
  landlord:
    build:
      context: .
      dockerfile: landlord/Dockerfile
    container_name: payday-landlord
    command: >
      sh -c "python manage.py migrate &&
             gunicorn --bind 0.0.0.0:5000 landlord.wsgi:application"
    ports:
      - "5000:5000"
    volumes:
      - ./landlord:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - pgbouncer
      - minio
      - redis
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SaaS service (Django)
  saas:
    build:
      context: .
      dockerfile: payday/Dockerfile
    container_name: payday-saas
    restart: unless-stopped
    command: >
      sh -c "python manage.py migratetenants &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 payday.asgi:application"
    volumes:
      - ./payday:/app
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      - minio-init
      - landlord
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx service
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: payday-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /nginx:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - saas
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:latest
    restart: unless-stopped
    container_name: payday-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/init.sh:/docker-entrypoint-init.d/init.sh
      - ./postgresql/entrypoint.sh:/docker-entrypoint-init.d/entrypoint.sh
    environment:
      POSTGRES_DB: payday
      POSTGRES_USER: payday
      POSTGRES_PASSWORD: payday
    entrypoint: /docker-entrypoint-init.d/entrypoint.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: payday-pgbouncer
    restart: unless-stopped
    ports:
      - "6432:6432"
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    environment:
      DB_HOST: db
      DB_PORT: 5432
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h db -p 6432"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis service
  redis:
    container_name: payday-redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO service
  minio:
    container_name: payday-minio
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_OPTS: --address :9000 --console-address :9001
    command: server /data --address :9000 --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./minio/bucket.sh:/docker-entrypoint-init.d/bucket.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO initialization service
  minio-init:
    build:
      context: .
      dockerfile: minio/Miniofile
    volumes:
      - ./minio:/app
    container_name: payday-minio-init
    depends_on:
      - minio
    environment:
      MINIO_BUCKET_NAME: payday
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin

  # Celery worker service
  worker:
    build:
      context: .
      dockerfile: payday/Dockerfile
    restart: unless-stopped
    container_name: payday-worker
    command: celery -A payday worker -l INFO -E
    volumes:
      - ./payday:/app
    depends_on:
      - saas
    env_file:
      - prod.env
    healthcheck:
      test: ["CMD-SHELL", "celery -A payday inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower service
  flower:
    image: mher/flower:0.9.7
    command: ['flower', '--broker=redis://redis:6379', '--port=5555']
    ports:
      - "5555:5555"
    depends_on:
      - worker
    environment:
      FLOWER_BROKER: redis://redis:6379/0
      FLOWER_BASIC_AUTH: admin:admin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot service
  certbot:
    build:
      context: .
      dockerfile: certbot/Dockerfile
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/digitalocean.ini:/etc/letsencrypt/digitalocean.ini
    #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  minio_data:
