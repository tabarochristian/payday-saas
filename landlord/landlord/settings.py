"""
Django settings for landlord project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from dotenv import load_dotenv
from pathlib import Path
import dj_database_url
import os

# Setting environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-06ypcma#qfpku2z89w08jpa0o%5uy9vwsq2@7i)ierd=!jf@+g"
SECRET_KEY = os.getenv('SECRET_KEY', SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', 1)))

ALLOWED_HOSTS = list(os.getenv('ALLOWED_HOSTS', '*').split(','))

# Application definition
INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.admin",

    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django.contrib.auth",


    "crispy_forms",
    "crispy_bootstrap5",
    "phonenumber_field",

    "tenant"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "landlord.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ['templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages"
            ],
        },
    },
]

WSGI_APPLICATION = "landlord.wsgi.application"
ASGI_APPLICATION = "landlord.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASE_URL = 'sqlite:///db.sqlite3'
DATABASES = {'default': None}

# Default database
DATABASES['default'] = dj_database_url.parse(DATABASE_URL)
DATABASES['default']['OPTIONS']['options'] = '-c search_path=landlord'

CONN_MAX_AGE = int(os.getenv('CONN_MAX_AGE', 0))
DATABASES['default']['CONN_MAX_AGE'] = CONN_MAX_AGE

# Redis settings
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = os.getenv('REDIS_PORT', 6379)

# Cache settings default memory and redis cache
CACHE_BACKEND = os.getenv('CACHE_BACKEND', 'django.core.cache.backends.locmem.LocMemCache')
CACHE_LOCATION = os.getenv('CACHE_LOCATION',  'unique-snowflake')

CACHES = {
    "default": {
        "LOCATION": CACHE_LOCATION,
        "BACKEND": CACHE_BACKEND,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

TIME_ZONE = os.getenv("TIME_ZONE", "Africa/Kinshasa")
LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "fr-cd")

USE_I18N = True
USE_TZ = True

LOCALE_PATHS = [BASE_DIR / 'locale']

LANGUAGES = [
    ('fr', 'French'),
    ('en', 'English'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Static URL (URL prefix for static files)
STATICFILES_LOCATION = "static/"
STATIC_URL = os.getenv("STATIC_URL", STATICFILES_LOCATION)
STATIC_ROOT = os.getenv("STATIC_ROOT", os.path.join(BASE_DIR, 'static'))

# Optional: Define S3 file URLs 
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_AUTH = False

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

STORAGES = {
    "default": {
        "BACKEND": DEFAULT_FILE_STORAGE
    },
    "staticfiles": {
        "BACKEND": STATICFILES_STORAGE
    },
}

MEDIAFILES_LOCATION = "media"
MEDIA_ROOT = BASE_DIR / MEDIAFILES_LOCATION
MEDIA_URL = os.getenv("MEDIA_URL", f'{MEDIAFILES_LOCATION}/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
# EMAIL_USE_SSL = bool(int(os.getenv('EMAIL_USE_SSL', 0)))
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', None)
EMAIL_USE_TLS = bool(int(os.getenv('EMAIL_USE_TLS', 0)))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'support@localhost')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = os.getenv('EMAIL_PORT', 1025)
DEFAULT_FROM_EMAIL=EMAIL_HOST_USER
SERVER_EMAIL = DEFAULT_FROM_EMAIL
ADMINS = [('support', DEFAULT_FROM_EMAIL)]

# Django Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = ['bootstrap', 'bootstrap5']
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Django Debug Toolbar settings
INTERNAL_IPS = os.getenv("INTERNAL_IPS", "localhost,".split(',')) 

# Django Celery settings
CELERY_RESULT_EXTENDED = True
CELERY_CACHE_BACKEND='django-cache'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL)
CELERY_BROKER_TRANSPORT_URL=os.getenv('CELERY_BROKER_TRANSPORT_URL', REDIS_URL)

# Sentry settings
SENTRY_DSN = "https://61630e2ac1f3c024ffa6a3d4a7207f57@o4505861077204992.ingest.us.sentry.io/4507582424612864"
SENTRY_DSN = os.getenv("SENTRY_DSN", SENTRY_DSN)

#if not DEBUG:
#import sentry_sdk
#sentry_sdk.init(dsn=SENTRY_DSN, traces_sample_rate=1.0, profiles_sample_rate=1.0)